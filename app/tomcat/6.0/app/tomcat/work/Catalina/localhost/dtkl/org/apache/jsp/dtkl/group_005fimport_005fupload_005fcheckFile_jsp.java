/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.64
 * Generated at: 2016-04-14 03:30:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.dtkl;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.asiainfo.os.InitParam;
import com.asiainfo.os.DateUtil;
import com.asiainfo.dtkl.WarnConfigModule;
import net.sf.json.JSONObject;
import java.io.FileOutputStream;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import java.io.File;
import java.io.InputStream;
import org.apache.log4j.Logger;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;

public final class group_005fimport_005fupload_005fcheckFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

     Logger logger = Logger.getLogger(this.getClass());
     JSONObject object=null;
     String trace="";
     String groupName="";
     String groupType="";
     String userId="";
 	 WarnConfigModule module = new WarnConfigModule();
     //消息提示
     InputStream inputStream=null;
     FileOutputStream outputStream=null;
     String message = "";
     try{
         //1、创建一个DiskFileItemFactory工厂
         DiskFileItemFactory factory = new DiskFileItemFactory();
         //2、创建一个文件上传解析器
         ServletFileUpload upload = new ServletFileUpload(factory);
         //解决上传文件名的中文乱码
         upload.setHeaderEncoding("UTF-8"); 
         //3、判断提交上来的数据是否是上传表单的数据
         if(!ServletFileUpload.isMultipartContent(request)){
        	return;
         }
         //4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List<FileItem>集合，每一个FileItem对应一个Form表单的输入项
         List<FileItem> list = upload.parseRequest(request);
         for(FileItem item : list){
        	//如果fileitem中封装的是普通输入项的数据
        	if(item.isFormField()){
        		
        	}else{
        		String filename = item.getName();
        		if(filename==null || filename.trim().equals("")){
        				continue;
        		}
        		filename = filename.substring(filename.lastIndexOf("\\")+1);
        		String suffix = filename.substring(0,
        				filename.lastIndexOf('.'));
    			//取得后缀名 
    			int lastIndex=filename.lastIndexOf('.');
    			String ext = filename.substring(lastIndex);
    			//取得文件的大小   
    			String newFileName = suffix
    					+ "_"
    					+ DateUtil.getInstance().getToday("yyyyMMddHHmmss")
    					+ext; 
    			//保存路径 
    			String path = InitParam.WEB_APP_PATH
    					+ InitParam.FILE_UPLOAD_PATH;
    			trace = path + File.separator + newFileName;
        		//获取item中的上传文件的输入流
        		inputStream = item.getInputStream();
        		//创建一个文件输出流
        		File fileOut = new File(trace);
        		outputStream = new FileOutputStream(fileOut);
        		//创建一个缓冲区
        		byte buffer[] = new byte[1024];
        		//判断输入流中的数据是否已经读完的标识
        		int len = 0;
        		while((len=inputStream.read(buffer))>0){
        			outputStream.write(buffer, 0, len);
        		}
        	 }
         }
     }catch(Exception e){
    	 logger.error(e.toString());
     }finally{
    	//关闭输入流
 		inputStream.close();
 		//关闭输出流
 		outputStream.close();
     }
    object = module.groupImportCheckFile(trace);
	out.println("<script>parent.uploadCheckFileTip(" + object + ")</script>");

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
